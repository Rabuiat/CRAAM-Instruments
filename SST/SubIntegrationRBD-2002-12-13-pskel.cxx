// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "SubIntegrationRBD-2002-12-13-pskel.hxx"

// SubIntegrationRecord_pskel
//

void SubIntegrationRecord_pskel::
time_parser (::xml_schema::int_pskel& p)
{
  this->time_parser_ = &p;
}

void SubIntegrationRecord_pskel::
adcval0_parser (::xml_schema::unsigned_short_pskel& p)
{
  this->adcval0_parser_ = &p;
}

void SubIntegrationRecord_pskel::
adcval1_parser (::xml_schema::unsigned_short_pskel& p)
{
  this->adcval1_parser_ = &p;
}

void SubIntegrationRecord_pskel::
adcval2_parser (::xml_schema::unsigned_short_pskel& p)
{
  this->adcval2_parser_ = &p;
}

void SubIntegrationRecord_pskel::
adcval3_parser (::xml_schema::unsigned_short_pskel& p)
{
  this->adcval3_parser_ = &p;
}

void SubIntegrationRecord_pskel::
adcval4_parser (::xml_schema::unsigned_short_pskel& p)
{
  this->adcval4_parser_ = &p;
}

void SubIntegrationRecord_pskel::
adcval5_parser (::xml_schema::unsigned_short_pskel& p)
{
  this->adcval5_parser_ = &p;
}

void SubIntegrationRecord_pskel::
pos_time_parser (::xml_schema::int_pskel& p)
{
  this->pos_time_parser_ = &p;
}

void SubIntegrationRecord_pskel::
azipos_parser (::xml_schema::int_pskel& p)
{
  this->azipos_parser_ = &p;
}

void SubIntegrationRecord_pskel::
elepos_parser (::xml_schema::int_pskel& p)
{
  this->elepos_parser_ = &p;
}

void SubIntegrationRecord_pskel::
pm_daz_parser (::xml_schema::short_pskel& p)
{
  this->pm_daz_parser_ = &p;
}

void SubIntegrationRecord_pskel::
pm_del_parser (::xml_schema::short_pskel& p)
{
  this->pm_del_parser_ = &p;
}

void SubIntegrationRecord_pskel::
azierr_parser (::xml_schema::int_pskel& p)
{
  this->azierr_parser_ = &p;
}

void SubIntegrationRecord_pskel::
eleerr_parser (::xml_schema::int_pskel& p)
{
  this->eleerr_parser_ = &p;
}

void SubIntegrationRecord_pskel::
x_off_parser (::xml_schema::short_pskel& p)
{
  this->x_off_parser_ = &p;
}

void SubIntegrationRecord_pskel::
y_off_parser (::xml_schema::short_pskel& p)
{
  this->y_off_parser_ = &p;
}

void SubIntegrationRecord_pskel::
off0_parser (::xml_schema::short_pskel& p)
{
  this->off0_parser_ = &p;
}

void SubIntegrationRecord_pskel::
off1_parser (::xml_schema::short_pskel& p)
{
  this->off1_parser_ = &p;
}

void SubIntegrationRecord_pskel::
off2_parser (::xml_schema::short_pskel& p)
{
  this->off2_parser_ = &p;
}

void SubIntegrationRecord_pskel::
off3_parser (::xml_schema::short_pskel& p)
{
  this->off3_parser_ = &p;
}

void SubIntegrationRecord_pskel::
off4_parser (::xml_schema::short_pskel& p)
{
  this->off4_parser_ = &p;
}

void SubIntegrationRecord_pskel::
off5_parser (::xml_schema::short_pskel& p)
{
  this->off5_parser_ = &p;
}

void SubIntegrationRecord_pskel::
target_parser (::xml_schema::byte_pskel& p)
{
  this->target_parser_ = &p;
}

void SubIntegrationRecord_pskel::
opmode_parser (::xml_schema::byte_pskel& p)
{
  this->opmode_parser_ = &p;
}

void SubIntegrationRecord_pskel::
gps_status_parser (::xml_schema::short_pskel& p)
{
  this->gps_status_parser_ = &p;
}

void SubIntegrationRecord_pskel::
recnum_parser (::xml_schema::int_pskel& p)
{
  this->recnum_parser_ = &p;
}

void SubIntegrationRecord_pskel::
parsers (::xml_schema::int_pskel& time,
         ::xml_schema::unsigned_short_pskel& adcval0,
         ::xml_schema::unsigned_short_pskel& adcval1,
         ::xml_schema::unsigned_short_pskel& adcval2,
         ::xml_schema::unsigned_short_pskel& adcval3,
         ::xml_schema::unsigned_short_pskel& adcval4,
         ::xml_schema::unsigned_short_pskel& adcval5,
         ::xml_schema::int_pskel& pos_time,
         ::xml_schema::int_pskel& azipos,
         ::xml_schema::int_pskel& elepos,
         ::xml_schema::short_pskel& pm_daz,
         ::xml_schema::short_pskel& pm_del,
         ::xml_schema::int_pskel& azierr,
         ::xml_schema::int_pskel& eleerr,
         ::xml_schema::short_pskel& x_off,
         ::xml_schema::short_pskel& y_off,
         ::xml_schema::short_pskel& off0,
         ::xml_schema::short_pskel& off1,
         ::xml_schema::short_pskel& off2,
         ::xml_schema::short_pskel& off3,
         ::xml_schema::short_pskel& off4,
         ::xml_schema::short_pskel& off5,
         ::xml_schema::byte_pskel& target,
         ::xml_schema::byte_pskel& opmode,
         ::xml_schema::short_pskel& gps_status,
         ::xml_schema::int_pskel& recnum)
{
  this->time_parser_ = &time;
  this->adcval0_parser_ = &adcval0;
  this->adcval1_parser_ = &adcval1;
  this->adcval2_parser_ = &adcval2;
  this->adcval3_parser_ = &adcval3;
  this->adcval4_parser_ = &adcval4;
  this->adcval5_parser_ = &adcval5;
  this->pos_time_parser_ = &pos_time;
  this->azipos_parser_ = &azipos;
  this->elepos_parser_ = &elepos;
  this->pm_daz_parser_ = &pm_daz;
  this->pm_del_parser_ = &pm_del;
  this->azierr_parser_ = &azierr;
  this->eleerr_parser_ = &eleerr;
  this->x_off_parser_ = &x_off;
  this->y_off_parser_ = &y_off;
  this->off0_parser_ = &off0;
  this->off1_parser_ = &off1;
  this->off2_parser_ = &off2;
  this->off3_parser_ = &off3;
  this->off4_parser_ = &off4;
  this->off5_parser_ = &off5;
  this->target_parser_ = &target;
  this->opmode_parser_ = &opmode;
  this->gps_status_parser_ = &gps_status;
  this->recnum_parser_ = &recnum;
}

SubIntegrationRecord_pskel::
SubIntegrationRecord_pskel ()
: time_parser_ (0),
  adcval0_parser_ (0),
  adcval1_parser_ (0),
  adcval2_parser_ (0),
  adcval3_parser_ (0),
  adcval4_parser_ (0),
  adcval5_parser_ (0),
  pos_time_parser_ (0),
  azipos_parser_ (0),
  elepos_parser_ (0),
  pm_daz_parser_ (0),
  pm_del_parser_ (0),
  azierr_parser_ (0),
  eleerr_parser_ (0),
  x_off_parser_ (0),
  y_off_parser_ (0),
  off0_parser_ (0),
  off1_parser_ (0),
  off2_parser_ (0),
  off3_parser_ (0),
  off4_parser_ (0),
  off5_parser_ (0),
  target_parser_ (0),
  opmode_parser_ (0),
  gps_status_parser_ (0),
  recnum_parser_ (0),
  v_state_stack_ (sizeof (v_state_), &v_state_first_)
{
}

// SubIntegrationRecord_pskel
//

void SubIntegrationRecord_pskel::
time (int)
{
}

void SubIntegrationRecord_pskel::
adcval0 (unsigned short)
{
}

void SubIntegrationRecord_pskel::
adcval1 (unsigned short)
{
}

void SubIntegrationRecord_pskel::
adcval2 (unsigned short)
{
}

void SubIntegrationRecord_pskel::
adcval3 (unsigned short)
{
}

void SubIntegrationRecord_pskel::
adcval4 (unsigned short)
{
}

void SubIntegrationRecord_pskel::
adcval5 (unsigned short)
{
}

void SubIntegrationRecord_pskel::
pos_time (int)
{
}

void SubIntegrationRecord_pskel::
azipos (int)
{
}

void SubIntegrationRecord_pskel::
elepos (int)
{
}

void SubIntegrationRecord_pskel::
pm_daz (short)
{
}

void SubIntegrationRecord_pskel::
pm_del (short)
{
}

void SubIntegrationRecord_pskel::
azierr (int)
{
}

void SubIntegrationRecord_pskel::
eleerr (int)
{
}

void SubIntegrationRecord_pskel::
x_off (short)
{
}

void SubIntegrationRecord_pskel::
y_off (short)
{
}

void SubIntegrationRecord_pskel::
off0 (short)
{
}

void SubIntegrationRecord_pskel::
off1 (short)
{
}

void SubIntegrationRecord_pskel::
off2 (short)
{
}

void SubIntegrationRecord_pskel::
off3 (short)
{
}

void SubIntegrationRecord_pskel::
off4 (short)
{
}

void SubIntegrationRecord_pskel::
off5 (short)
{
}

void SubIntegrationRecord_pskel::
target (signed char)
{
}

void SubIntegrationRecord_pskel::
opmode (signed char)
{
}

void SubIntegrationRecord_pskel::
gps_status (short)
{
}

void SubIntegrationRecord_pskel::
recnum (int)
{
}

void SubIntegrationRecord_pskel::
post_SubIntegrationRecord ()
{
}

#include <cassert>

// Element validation and dispatch functions for SubIntegrationRecord_pskel.
//
bool SubIntegrationRecord_pskel::
_start_element_impl (const ::xml_schema::ro_string& ns,
                     const ::xml_schema::ro_string& n,
                     const ::xml_schema::ro_string* t)
{
  XSD_UNUSED (t);

  v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
  v_state_descr_* vd = vs.data + (vs.size - 1);

  if (vd->func == 0 && vd->state == 0)
  {
    if (this->::xml_schema::complex_content::_start_element_impl (ns, n, t))
      return true;
    else
      vd->state = 1;
  }

  while (vd->func != 0)
  {
    (this->*vd->func) (vd->state, vd->count, ns, n, t, true);

    vd = vs.data + (vs.size - 1);

    if (vd->state == ~0UL)
      vd = vs.data + (--vs.size - 1);
    else
      break;
  }

  if (vd->func == 0)
  {
    if (vd->state != ~0UL)
    {
      unsigned long s = ~0UL;

      if (n == "time" && ns.empty ())
        s = 0UL;

      if (s != ~0UL)
      {
        vd->count++;
        vd->state = ~0UL;

        vd = vs.data + vs.size++;
        vd->func = &SubIntegrationRecord_pskel::sequence_0;
        vd->state = s;
        vd->count = 0;

        this->sequence_0 (vd->state, vd->count, ns, n, t, true);
      }
      else
      {
        if (vd->count < 1UL)
          this->_expected_element (
            "", "time",
            ns, n);
        return false;
      }
    }
    else
      return false;
  }

  return true;
}

bool SubIntegrationRecord_pskel::
_end_element_impl (const ::xml_schema::ro_string& ns,
                   const ::xml_schema::ro_string& n)
{
  v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
  v_state_descr_& vd = vs.data[vs.size - 1];

  if (vd.func == 0 && vd.state == 0)
  {
    if (!::xml_schema::complex_content::_end_element_impl (ns, n))
      assert (false);
    return true;
  }

  assert (vd.func != 0);
  (this->*vd.func) (vd.state, vd.count, ns, n, 0, false);

  if (vd.state == ~0UL)
    vs.size--;

  return true;
}

void SubIntegrationRecord_pskel::
_pre_e_validate ()
{
  this->v_state_stack_.push ();
  static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

  v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
  v_state_descr_& vd = vs.data[vs.size++];

  vd.func = 0;
  vd.state = 0;
  vd.count = 0;
}

void SubIntegrationRecord_pskel::
_post_e_validate ()
{
  v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
  v_state_descr_* vd = vs.data + (vs.size - 1);

  ::xml_schema::ro_string empty;
  while (vd->func != 0)
  {
    (this->*vd->func) (vd->state, vd->count, empty, empty, 0, true);
    assert (vd->state == ~0UL);
    vd = vs.data + (--vs.size - 1);
  }

  if (vd->count < 1UL)
    this->_expected_element (
      "", "time");

  this->v_state_stack_.pop ();
}

void SubIntegrationRecord_pskel::
sequence_0 (unsigned long& state,
            unsigned long& count,
            const ::xml_schema::ro_string& ns,
            const ::xml_schema::ro_string& n,
            const ::xml_schema::ro_string* t,
            bool start)
{
  XSD_UNUSED (t);

  switch (state)
  {
    case 0UL:
    {
      if (n == "time" && ns.empty ())
      {
        if (start)
        {
          this->::xml_schema::complex_content::context_.top ().parser_ = this->time_parser_;

          if (this->time_parser_)
            this->time_parser_->pre ();
        }
        else
        {
          if (this->time_parser_)
          {
            int tmp (this->time_parser_->post_int ());
            this->time (tmp);
          }

          count = 0;
          state = 1UL;
        }

        break;
      }
      else
      {
        assert (start);
        if (count < 1UL)
          this->_expected_element (
            "", "time",
            ns, n);
        count = 0;
        state = 1UL;
        // Fall through.
      }
    }
    case 1UL:
    {
      if (n == "adcval0" && ns.empty ())
      {
        if (start)
        {
          this->::xml_schema::complex_content::context_.top ().parser_ = this->adcval0_parser_;

          if (this->adcval0_parser_)
            this->adcval0_parser_->pre ();
        }
        else
        {
          if (this->adcval0_parser_)
          {
            unsigned short tmp (this->adcval0_parser_->post_unsigned_short ());
            this->adcval0 (tmp);
          }

          count = 0;
          state = 2UL;
        }

        break;
      }
      else
      {
        assert (start);
        if (count < 1UL)
          this->_expected_element (
            "", "adcval0",
            ns, n);
        count = 0;
        state = 2UL;
        // Fall through.
      }
    }
    case 2UL:
    {
      if (n == "adcval1" && ns.empty ())
      {
        if (start)
        {
          this->::xml_schema::complex_content::context_.top ().parser_ = this->adcval1_parser_;

          if (this->adcval1_parser_)
            this->adcval1_parser_->pre ();
        }
        else
        {
          if (this->adcval1_parser_)
          {
            unsigned short tmp (this->adcval1_parser_->post_unsigned_short ());
            this->adcval1 (tmp);
          }

          count = 0;
          state = 3UL;
        }

        break;
      }
      else
      {
        assert (start);
        if (count < 1UL)
          this->_expected_element (
            "", "adcval1",
            ns, n);
        count = 0;
        state = 3UL;
        // Fall through.
      }
    }
    case 3UL:
    {
      if (n == "adcval2" && ns.empty ())
      {
        if (start)
        {
          this->::xml_schema::complex_content::context_.top ().parser_ = this->adcval2_parser_;

          if (this->adcval2_parser_)
            this->adcval2_parser_->pre ();
        }
        else
        {
          if (this->adcval2_parser_)
          {
            unsigned short tmp (this->adcval2_parser_->post_unsigned_short ());
            this->adcval2 (tmp);
          }

          count = 0;
          state = 4UL;
        }

        break;
      }
      else
      {
        assert (start);
        if (count < 1UL)
          this->_expected_element (
            "", "adcval2",
            ns, n);
        count = 0;
        state = 4UL;
        // Fall through.
      }
    }
    case 4UL:
    {
      if (n == "adcval3" && ns.empty ())
      {
        if (start)
        {
          this->::xml_schema::complex_content::context_.top ().parser_ = this->adcval3_parser_;

          if (this->adcval3_parser_)
            this->adcval3_parser_->pre ();
        }
        else
        {
          if (this->adcval3_parser_)
          {
            unsigned short tmp (this->adcval3_parser_->post_unsigned_short ());
            this->adcval3 (tmp);
          }

          count = 0;
          state = 5UL;
        }

        break;
      }
      else
      {
        assert (start);
        if (count < 1UL)
          this->_expected_element (
            "", "adcval3",
            ns, n);
        count = 0;
        state = 5UL;
        // Fall through.
      }
    }
    case 5UL:
    {
      if (n == "adcval4" && ns.empty ())
      {
        if (start)
        {
          this->::xml_schema::complex_content::context_.top ().parser_ = this->adcval4_parser_;

          if (this->adcval4_parser_)
            this->adcval4_parser_->pre ();
        }
        else
        {
          if (this->adcval4_parser_)
          {
            unsigned short tmp (this->adcval4_parser_->post_unsigned_short ());
            this->adcval4 (tmp);
          }

          count = 0;
          state = 6UL;
        }

        break;
      }
      else
      {
        assert (start);
        if (count < 1UL)
          this->_expected_element (
            "", "adcval4",
            ns, n);
        count = 0;
        state = 6UL;
        // Fall through.
      }
    }
    case 6UL:
    {
      if (n == "adcval5" && ns.empty ())
      {
        if (start)
        {
          this->::xml_schema::complex_content::context_.top ().parser_ = this->adcval5_parser_;

          if (this->adcval5_parser_)
            this->adcval5_parser_->pre ();
        }
        else
        {
          if (this->adcval5_parser_)
          {
            unsigned short tmp (this->adcval5_parser_->post_unsigned_short ());
            this->adcval5 (tmp);
          }

          count = 0;
          state = 7UL;
        }

        break;
      }
      else
      {
        assert (start);
        if (count < 1UL)
          this->_expected_element (
            "", "adcval5",
            ns, n);
        count = 0;
        state = 7UL;
        // Fall through.
      }
    }
    case 7UL:
    {
      if (n == "pos_time" && ns.empty ())
      {
        if (start)
        {
          this->::xml_schema::complex_content::context_.top ().parser_ = this->pos_time_parser_;

          if (this->pos_time_parser_)
            this->pos_time_parser_->pre ();
        }
        else
        {
          if (this->pos_time_parser_)
          {
            int tmp (this->pos_time_parser_->post_int ());
            this->pos_time (tmp);
          }

          count = 0;
          state = 8UL;
        }

        break;
      }
      else
      {
        assert (start);
        if (count < 1UL)
          this->_expected_element (
            "", "pos_time",
            ns, n);
        count = 0;
        state = 8UL;
        // Fall through.
      }
    }
    case 8UL:
    {
      if (n == "azipos" && ns.empty ())
      {
        if (start)
        {
          this->::xml_schema::complex_content::context_.top ().parser_ = this->azipos_parser_;

          if (this->azipos_parser_)
            this->azipos_parser_->pre ();
        }
        else
        {
          if (this->azipos_parser_)
          {
            int tmp (this->azipos_parser_->post_int ());
            this->azipos (tmp);
          }

          count = 0;
          state = 9UL;
        }

        break;
      }
      else
      {
        assert (start);
        if (count < 1UL)
          this->_expected_element (
            "", "azipos",
            ns, n);
        count = 0;
        state = 9UL;
        // Fall through.
      }
    }
    case 9UL:
    {
      if (n == "elepos" && ns.empty ())
      {
        if (start)
        {
          this->::xml_schema::complex_content::context_.top ().parser_ = this->elepos_parser_;

          if (this->elepos_parser_)
            this->elepos_parser_->pre ();
        }
        else
        {
          if (this->elepos_parser_)
          {
            int tmp (this->elepos_parser_->post_int ());
            this->elepos (tmp);
          }

          count = 0;
          state = 10UL;
        }

        break;
      }
      else
      {
        assert (start);
        if (count < 1UL)
          this->_expected_element (
            "", "elepos",
            ns, n);
        count = 0;
        state = 10UL;
        // Fall through.
      }
    }
    case 10UL:
    {
      if (n == "pm_daz" && ns.empty ())
      {
        if (start)
        {
          this->::xml_schema::complex_content::context_.top ().parser_ = this->pm_daz_parser_;

          if (this->pm_daz_parser_)
            this->pm_daz_parser_->pre ();
        }
        else
        {
          if (this->pm_daz_parser_)
          {
            short tmp (this->pm_daz_parser_->post_short ());
            this->pm_daz (tmp);
          }

          count = 0;
          state = 11UL;
        }

        break;
      }
      else
      {
        assert (start);
        if (count < 1UL)
          this->_expected_element (
            "", "pm_daz",
            ns, n);
        count = 0;
        state = 11UL;
        // Fall through.
      }
    }
    case 11UL:
    {
      if (n == "pm_del" && ns.empty ())
      {
        if (start)
        {
          this->::xml_schema::complex_content::context_.top ().parser_ = this->pm_del_parser_;

          if (this->pm_del_parser_)
            this->pm_del_parser_->pre ();
        }
        else
        {
          if (this->pm_del_parser_)
          {
            short tmp (this->pm_del_parser_->post_short ());
            this->pm_del (tmp);
          }

          count = 0;
          state = 12UL;
        }

        break;
      }
      else
      {
        assert (start);
        if (count < 1UL)
          this->_expected_element (
            "", "pm_del",
            ns, n);
        count = 0;
        state = 12UL;
        // Fall through.
      }
    }
    case 12UL:
    {
      if (n == "azierr" && ns.empty ())
      {
        if (start)
        {
          this->::xml_schema::complex_content::context_.top ().parser_ = this->azierr_parser_;

          if (this->azierr_parser_)
            this->azierr_parser_->pre ();
        }
        else
        {
          if (this->azierr_parser_)
          {
            int tmp (this->azierr_parser_->post_int ());
            this->azierr (tmp);
          }

          count = 0;
          state = 13UL;
        }

        break;
      }
      else
      {
        assert (start);
        if (count < 1UL)
          this->_expected_element (
            "", "azierr",
            ns, n);
        count = 0;
        state = 13UL;
        // Fall through.
      }
    }
    case 13UL:
    {
      if (n == "eleerr" && ns.empty ())
      {
        if (start)
        {
          this->::xml_schema::complex_content::context_.top ().parser_ = this->eleerr_parser_;

          if (this->eleerr_parser_)
            this->eleerr_parser_->pre ();
        }
        else
        {
          if (this->eleerr_parser_)
          {
            int tmp (this->eleerr_parser_->post_int ());
            this->eleerr (tmp);
          }

          count = 0;
          state = 14UL;
        }

        break;
      }
      else
      {
        assert (start);
        if (count < 1UL)
          this->_expected_element (
            "", "eleerr",
            ns, n);
        count = 0;
        state = 14UL;
        // Fall through.
      }
    }
    case 14UL:
    {
      if (n == "x_off" && ns.empty ())
      {
        if (start)
        {
          this->::xml_schema::complex_content::context_.top ().parser_ = this->x_off_parser_;

          if (this->x_off_parser_)
            this->x_off_parser_->pre ();
        }
        else
        {
          if (this->x_off_parser_)
          {
            short tmp (this->x_off_parser_->post_short ());
            this->x_off (tmp);
          }

          count = 0;
          state = 15UL;
        }

        break;
      }
      else
      {
        assert (start);
        if (count < 1UL)
          this->_expected_element (
            "", "x_off",
            ns, n);
        count = 0;
        state = 15UL;
        // Fall through.
      }
    }
    case 15UL:
    {
      if (n == "y_off" && ns.empty ())
      {
        if (start)
        {
          this->::xml_schema::complex_content::context_.top ().parser_ = this->y_off_parser_;

          if (this->y_off_parser_)
            this->y_off_parser_->pre ();
        }
        else
        {
          if (this->y_off_parser_)
          {
            short tmp (this->y_off_parser_->post_short ());
            this->y_off (tmp);
          }

          count = 0;
          state = 16UL;
        }

        break;
      }
      else
      {
        assert (start);
        if (count < 1UL)
          this->_expected_element (
            "", "y_off",
            ns, n);
        count = 0;
        state = 16UL;
        // Fall through.
      }
    }
    case 16UL:
    {
      if (n == "off0" && ns.empty ())
      {
        if (start)
        {
          this->::xml_schema::complex_content::context_.top ().parser_ = this->off0_parser_;

          if (this->off0_parser_)
            this->off0_parser_->pre ();
        }
        else
        {
          if (this->off0_parser_)
          {
            short tmp (this->off0_parser_->post_short ());
            this->off0 (tmp);
          }

          count = 0;
          state = 17UL;
        }

        break;
      }
      else
      {
        assert (start);
        if (count < 1UL)
          this->_expected_element (
            "", "off0",
            ns, n);
        count = 0;
        state = 17UL;
        // Fall through.
      }
    }
    case 17UL:
    {
      if (n == "off1" && ns.empty ())
      {
        if (start)
        {
          this->::xml_schema::complex_content::context_.top ().parser_ = this->off1_parser_;

          if (this->off1_parser_)
            this->off1_parser_->pre ();
        }
        else
        {
          if (this->off1_parser_)
          {
            short tmp (this->off1_parser_->post_short ());
            this->off1 (tmp);
          }

          count = 0;
          state = 18UL;
        }

        break;
      }
      else
      {
        assert (start);
        if (count < 1UL)
          this->_expected_element (
            "", "off1",
            ns, n);
        count = 0;
        state = 18UL;
        // Fall through.
      }
    }
    case 18UL:
    {
      if (n == "off2" && ns.empty ())
      {
        if (start)
        {
          this->::xml_schema::complex_content::context_.top ().parser_ = this->off2_parser_;

          if (this->off2_parser_)
            this->off2_parser_->pre ();
        }
        else
        {
          if (this->off2_parser_)
          {
            short tmp (this->off2_parser_->post_short ());
            this->off2 (tmp);
          }

          count = 0;
          state = 19UL;
        }

        break;
      }
      else
      {
        assert (start);
        if (count < 1UL)
          this->_expected_element (
            "", "off2",
            ns, n);
        count = 0;
        state = 19UL;
        // Fall through.
      }
    }
    case 19UL:
    {
      if (n == "off3" && ns.empty ())
      {
        if (start)
        {
          this->::xml_schema::complex_content::context_.top ().parser_ = this->off3_parser_;

          if (this->off3_parser_)
            this->off3_parser_->pre ();
        }
        else
        {
          if (this->off3_parser_)
          {
            short tmp (this->off3_parser_->post_short ());
            this->off3 (tmp);
          }

          count = 0;
          state = 20UL;
        }

        break;
      }
      else
      {
        assert (start);
        if (count < 1UL)
          this->_expected_element (
            "", "off3",
            ns, n);
        count = 0;
        state = 20UL;
        // Fall through.
      }
    }
    case 20UL:
    {
      if (n == "off4" && ns.empty ())
      {
        if (start)
        {
          this->::xml_schema::complex_content::context_.top ().parser_ = this->off4_parser_;

          if (this->off4_parser_)
            this->off4_parser_->pre ();
        }
        else
        {
          if (this->off4_parser_)
          {
            short tmp (this->off4_parser_->post_short ());
            this->off4 (tmp);
          }

          count = 0;
          state = 21UL;
        }

        break;
      }
      else
      {
        assert (start);
        if (count < 1UL)
          this->_expected_element (
            "", "off4",
            ns, n);
        count = 0;
        state = 21UL;
        // Fall through.
      }
    }
    case 21UL:
    {
      if (n == "off5" && ns.empty ())
      {
        if (start)
        {
          this->::xml_schema::complex_content::context_.top ().parser_ = this->off5_parser_;

          if (this->off5_parser_)
            this->off5_parser_->pre ();
        }
        else
        {
          if (this->off5_parser_)
          {
            short tmp (this->off5_parser_->post_short ());
            this->off5 (tmp);
          }

          count = 0;
          state = 22UL;
        }

        break;
      }
      else
      {
        assert (start);
        if (count < 1UL)
          this->_expected_element (
            "", "off5",
            ns, n);
        count = 0;
        state = 22UL;
        // Fall through.
      }
    }
    case 22UL:
    {
      if (n == "target" && ns.empty ())
      {
        if (start)
        {
          this->::xml_schema::complex_content::context_.top ().parser_ = this->target_parser_;

          if (this->target_parser_)
            this->target_parser_->pre ();
        }
        else
        {
          if (this->target_parser_)
          {
            signed char tmp (this->target_parser_->post_byte ());
            this->target (tmp);
          }

          count = 0;
          state = 23UL;
        }

        break;
      }
      else
      {
        assert (start);
        if (count < 1UL)
          this->_expected_element (
            "", "target",
            ns, n);
        count = 0;
        state = 23UL;
        // Fall through.
      }
    }
    case 23UL:
    {
      if (n == "opmode" && ns.empty ())
      {
        if (start)
        {
          this->::xml_schema::complex_content::context_.top ().parser_ = this->opmode_parser_;

          if (this->opmode_parser_)
            this->opmode_parser_->pre ();
        }
        else
        {
          if (this->opmode_parser_)
          {
            signed char tmp (this->opmode_parser_->post_byte ());
            this->opmode (tmp);
          }

          count = 0;
          state = 24UL;
        }

        break;
      }
      else
      {
        assert (start);
        if (count < 1UL)
          this->_expected_element (
            "", "opmode",
            ns, n);
        count = 0;
        state = 24UL;
        // Fall through.
      }
    }
    case 24UL:
    {
      if (n == "gps_status" && ns.empty ())
      {
        if (start)
        {
          this->::xml_schema::complex_content::context_.top ().parser_ = this->gps_status_parser_;

          if (this->gps_status_parser_)
            this->gps_status_parser_->pre ();
        }
        else
        {
          if (this->gps_status_parser_)
          {
            short tmp (this->gps_status_parser_->post_short ());
            this->gps_status (tmp);
          }

          count = 0;
          state = 25UL;
        }

        break;
      }
      else
      {
        assert (start);
        if (count < 1UL)
          this->_expected_element (
            "", "gps_status",
            ns, n);
        count = 0;
        state = 25UL;
        // Fall through.
      }
    }
    case 25UL:
    {
      if (n == "recnum" && ns.empty ())
      {
        if (start)
        {
          this->::xml_schema::complex_content::context_.top ().parser_ = this->recnum_parser_;

          if (this->recnum_parser_)
            this->recnum_parser_->pre ();
        }
        else
        {
          if (this->recnum_parser_)
          {
            int tmp (this->recnum_parser_->post_int ());
            this->recnum (tmp);
          }

          count = 0;
          state = ~0UL;
        }

        break;
      }
      else
      {
        assert (start);
        if (count < 1UL)
          this->_expected_element (
            "", "recnum",
            ns, n);
        count = 0;
        state = ~0UL;
        // Fall through.
      }
    }
    case ~0UL:
      break;
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

